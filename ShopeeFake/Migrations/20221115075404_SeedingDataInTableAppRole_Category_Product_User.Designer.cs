// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopeeFake.Data;

#nullable disable

namespace ShopeeFake.Migrations
{
    [DbContext(typeof(ShopeeFakeDbContex))]
    [Migration("20221115075404_SeedingDataInTableAppRole_Category_Product_User")]
    partial class SeedingDataInTableAppRole_Category_Product_User
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShopeeFake.Models.AppRole", b =>
                {
                    b.Property<long>("AppRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AppRoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppRoleId");

                    b.ToTable("AppRole", (string)null);

                    b.HasData(
                        new
                        {
                            AppRoleId = 1L,
                            RoleName = "Admin"
                        },
                        new
                        {
                            AppRoleId = 2L,
                            RoleName = "STAFF"
                        },
                        new
                        {
                            AppRoleId = 3L,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("ShopeeFake.Models.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ShopeeFake.Models.CartDetail", b =>
                {
                    b.Property<long>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartDetailId"), 1L, 1);

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("ShopeeFake.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            CategoryName = "Op Lung"
                        },
                        new
                        {
                            CategoryId = 2L,
                            CategoryName = "Cuong luc"
                        },
                        new
                        {
                            CategoryId = 3L,
                            CategoryName = "Xac"
                        },
                        new
                        {
                            CategoryId = 4L,
                            CategoryName = "Tai Nghe"
                        });
                });

            modelBuilder.Entity("ShopeeFake.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ShopeeFake.Models.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderDetailId"), 1L, 1);

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("ShopeeFake.Models.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            CategoryId = 4L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Tai Nghe Iphone",
                            Quantity = 100,
                            Sold = 5,
                            Status = true
                        },
                        new
                        {
                            ProductId = 2L,
                            CategoryId = 4L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 25000m,
                            ProductName = "Tai Nghe SamSung",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 3L,
                            CategoryId = 4L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 30000m,
                            ProductName = "Tai Nghe Oppo",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 4L,
                            CategoryId = 1L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Op Lung Iphone",
                            Quantity = 100,
                            Sold = 5,
                            Status = true
                        },
                        new
                        {
                            ProductId = 5L,
                            CategoryId = 1L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Op Lung SamSung",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 6L,
                            CategoryId = 1L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Op Lung Oppo",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 7L,
                            CategoryId = 2L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Cuong Luc Iphone",
                            Quantity = 100,
                            Sold = 10,
                            Status = true
                        },
                        new
                        {
                            ProductId = 8L,
                            CategoryId = 2L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Cuong Luc SamSung",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 9L,
                            CategoryId = 2L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Cuong Luc Oppo",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 10L,
                            CategoryId = 3L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Xac Iphone",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 11L,
                            CategoryId = 3L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Xac  SamSung",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        },
                        new
                        {
                            ProductId = 12L,
                            CategoryId = 3L,
                            Description = "",
                            Discount = 0,
                            EnteredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "ok",
                            Price = 20000m,
                            ProductName = "Xac  Oppo",
                            Quantity = 100,
                            Sold = 0,
                            Status = true
                        });
                });

            modelBuilder.Entity("ShopeeFake.Models.Rate", b =>
                {
                    b.Property<long>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RateId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RateId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("ShopeeFake.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserId");

                    b.HasIndex("AppRoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Address = "68 Trieu Khuc",
                            AppRoleId = 1L,
                            Email = "ngockyto008@gmail.com",
                            Gender = 1,
                            Password = "Ky1234567",
                            Phone = 393039393,
                            RegisterDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            Token = "",
                            UserName = "KyTo"
                        },
                        new
                        {
                            UserId = 2L,
                            Address = "69 Trieu Khuc",
                            AppRoleId = 2L,
                            Email = "ngockyto007@gmail.com",
                            Gender = 1,
                            Password = "Ky1234567",
                            Phone = 393039393,
                            RegisterDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            Token = "",
                            UserName = "NgocAnh"
                        },
                        new
                        {
                            UserId = 3L,
                            Address = "70 Trieu Khuc",
                            AppRoleId = 3L,
                            Email = "ngockyto006@gmail.com",
                            Gender = 1,
                            Password = "Ky1234567",
                            Phone = 393039393,
                            RegisterDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            Token = "",
                            UserName = "MinhChien"
                        });
                });

            modelBuilder.Entity("ShopeeFake.Models.Cart", b =>
                {
                    b.HasOne("ShopeeFake.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopeeFake.Models.CartDetail", b =>
                {
                    b.HasOne("ShopeeFake.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeFake.Models.Order", b =>
                {
                    b.HasOne("ShopeeFake.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopeeFake.Models.OrderDetail", b =>
                {
                    b.HasOne("ShopeeFake.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopeeFake.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeFake.Models.Product", b =>
                {
                    b.HasOne("ShopeeFake.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopeeFake.Models.Rate", b =>
                {
                    b.HasOne("ShopeeFake.Models.Product", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopeeFake.Models.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopeeFake.Models.User", b =>
                {
                    b.HasOne("ShopeeFake.Models.AppRole", "AppRole")
                        .WithMany("Users")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("ShopeeFake.Models.AppRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShopeeFake.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopeeFake.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ShopeeFake.Models.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("ShopeeFake.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
